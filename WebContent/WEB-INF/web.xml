<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  version="3.1"
  metadata-complete="true">

  <!--web.xml文件的继承,每个完整的JavaWeb应用中都需要有web.xml,但我们不知道所有的web.xml文件都有一个共同的父文件,它在tomcat的conf/web.xml路径。
  如果一个请求没有任何一个servlet处理,这是就会用到conf/web.xml文件里面的default这个servlet,这个servlet会显示404页面。
  这个默认的servlet的url-pattern是/,这个路径是匹配所有任何的路径,所以他的优先级最低。conf/web.xm这个文件里面还有处理jsp的servlet
  这个文件里面还有很多的mime-type类型,自己去看去，session-timeout过期时间也是在这里面配置的，
  阿里云  Servlet学习 课程 传智播客 itcast  东北老师讲的 https://edu.aliyun.com/course/1700?spm=5176.11400004.0.0.729c476808gSCa -->
  
  <context-param><!--可以使用ServletContext来获取context-param配置的公共参数  -->
  	<param-name>context-param</param-name>
  	<param-value>param-value</param-value>
  </context-param>
  <context-param><!--可以使用ServletContext来获取context-param配置的公共参数  -->
  	<param-name>context-param2</param-name>
  	<param-value>param-value2</param-value>
  </context-param>
  
  <display-name>Tomcat Manager Application</display-name>
  <description>
    A scriptable management web application for the Tomcat Web Server;
    Manager lets you view, load/unload/etc particular web applications.
  </description>
  <welcome-file-list>
  	<!-- 这个配置是当你访问http://localhost:8080/pcis/,项目的跟目录时就显示这个jsp
  		按顺序找,找到第一个就显示第一个文件,找不到就继续往下找
  	 -->
  	<welcome-file>login1111.jsp</welcome-file>
  	<welcome-file>login.jsp</welcome-file>
  </welcome-file-list>
	<servlet>
		<servlet-name>servletDeom</servlet-name>
		<servlet-class>com.yale.test.web.servlet.ServletDeom</servlet-class>
		<init-param>
			<param-name>p1</param-name>
			<param-value>v1</param-value>
		</init-param>
		<init-param>
			<param-name>p2</param-name>
			<param-value>v2</param-value>
		</init-param>
		<!--load-on-startup的意思是在tomcat服务启动的时候创建servlet的对象,而不是在第一次方法servlet的时候创建
			load-on-startup的值必须为非负整数,值越小的越先创建
		  -->
		<load-on-startup>0</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>servletDeom</servlet-name>
		<!--servlet-mapping中可以出现多个url-pattern,多个路径都调用这个servlet,url-pattern必须以/开头
		url-pattern还可以使用通配符*  -->
		<url-pattern>/servletDemo</url-pattern>
		<url-pattern>/servletTest</url-pattern>
		<url-pattern>/servlet/*</url-pattern>
		<url-pattern>*.do</url-pattern><!-- 注意*只能出现在俩端,不能出现在中间-->
		<!-- <url-pattern>/*</url-pattern>匹配所有的url,/*会把正常index.jsp这种请求也拦截调,匹配的越多优先级越低,先精准匹配,再模糊匹配。 -->
	</servlet-mapping>
	<servlet>
		<servlet-name>pageview</servlet-name>
		<servlet-class>com.yale.test.web.servlet.PageViewServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>pageview</servlet-name>
		<url-pattern>/pageview</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>classloader</servlet-name>
		<servlet-class>com.yale.test.web.servlet.ClassLoaderServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>classloader</servlet-name>
		<url-pattern>/classloader</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>userServlet</servlet-name>
		<servlet-class>com.yale.test.web.servlet.UserServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>userServlet</servlet-name>
		<url-pattern>/userServlet</url-pattern>
	</servlet-mapping>
	
	
	<servlet>
		<servlet-name>subBaseServlet</servlet-name>
		<servlet-class>com.yale.test.web.servlet.SubBaseServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>subBaseServlet</servlet-name>
		<url-pattern>/subBaseServlet</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>loginServlet</servlet-name>
		<servlet-class>com.yale.test.web.servlet.login.LoginServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>loginServlet</servlet-name>
		<url-pattern>/loginServlet</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>bookServlet</servlet-name>
		<servlet-class>com.yale.test.web.servlet.book.BookServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>bookServlet</servlet-name>
		<url-pattern>/bookServlet</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>encodeServlet</servlet-name>
		<servlet-class>com.yale.test.web.servlet.login.EncodeServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>encodeServlet</servlet-name>
		<url-pattern>/encodeServlet</url-pattern>
	</servlet-mapping>
	
    
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<!-- springmvc的DispatcherServlet默认在WEB-INF下面查找springmvc-serlvet.xml文件,不配置会报错.
		如果真不想配置,就需要通过配置监听器 ContextLoaderListener来指定你的文件路径-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 配置SpringMvc的核心Servlet,服务器启动这个Servlet就要实例化 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>*.springmvc</url-pattern>
	</servlet-mapping>
	<!-- 多个过滤器的执行顺序:	按照<filter-mapping>在Web.xml里面的配置顺序 -->
	<filter>
		<filter-name>loginFilter</filter-name>
		<filter-class>com.yale.test.web.filter.UserFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>loginFilter</filter-name>
		<url-pattern>/users/*</url-pattern>
	</filter-mapping>
	
	
	<filter>
		<filter-name>staticFilter</filter-name>
		<filter-class>com.yale.test.web.filter.book.StaticFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>staticFilter</filter-name>
		<servlet-name>bookServlet</servlet-name>
	</filter-mapping>
	
	<filter>
		<filter-name>adminFilter</filter-name>
		<filter-class>com.yale.test.web.filter.AdminFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>adminFilter</filter-name>
		<url-pattern>/admin/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>filterDemo</filter-name>
		<filter-class>com.yale.test.web.filter.FilterDemo</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>filterDemo</filter-name>
		<url-pattern>/subBaseServlet</url-pattern><!--/subBaseServlet的意思是只拦截/subBaseServlet这个请求, filter一般都会过滤所有请求,配置的一般都是/*-->
		<dispatcher>FORWARD</dispatcher><!-- 只拦转发 -->
	</filter-mapping>
	
	<filter>
		<filter-name>filterAll</filter-name>
		<filter-class>com.yale.test.web.filter.FilterAll</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>filterAll</filter-name><!-- 这里没有配置dispatcher,默认是拦截请求REQUEST -->
		<url-pattern>/*</url-pattern><!--filter一般都会过滤所有请求,配置的一般都是/*或者*.jsp,拦截的越多优先级越低-->
		<!-- <servlet-name>subBaseServlet</servlet-name> filter-mapping 里面还可以配置servlet-name 指定要拦截的servlet,可以有多个servlet-name -->
	</filter-mapping>
	
	<listener>
		<listener-class>com.yale.test.web.listener.ListenerDemo</listener-class>
	</listener>
	<listener>
		<listener-class>com.yale.test.web.listener.AttributeListener</listener-class>
	</listener>
	
	<error-page><!-- 当发生500错误的时候,跳转到500.jsp页面,如果filter配置了<dispatcher>ERROR</dispatcher>,那么filter会过滤这个请求 -->
		<error-code>500</error-code>
		<location>/error/500.jsp</location>
	</error-page>
</web-app>
